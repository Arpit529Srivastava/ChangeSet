const readPackageUp = require('read-package-up');

async function getChangesetContents(pullRequest, github) {
  try {
    // Get package.json to determine the package name
    let packageName = 'changeset-demo'; // Default fallback
    
    try {
      const packageResult = await readPackageUp();
      if (packageResult && packageResult.packageJson && packageResult.packageJson.name) {
        packageName = packageResult.packageJson.name;
      }
    } catch (packageError) {
      console.warn('Could not read package.json, using default package name:', packageError.message);
    }
    
    // Determine the type of change based on PR title
    let changeType = 'patch';
    const title = pullRequest.title.toLowerCase();
    
    if (title.startsWith('feat!') || title.startsWith('fix!')) {
      changeType = 'major';
    } else if (title.startsWith('feat')) {
      changeType = 'minor';
    } else if (title.startsWith('fix')) {
      changeType = 'patch';
    }
    
    // Create changeset content
    const changesetContent = `---
"${packageName}": ${changeType}
---

${pullRequest.title}

${pullRequest.body || 'No description provided.'}
`;
    
    return changesetContent;
  } catch (error) {
    console.error('Error generating changeset content:', error);
    // Return a default changeset instead of null
    return `---
"changeset-demo": patch
---

${pullRequest.title || 'Auto-generated changeset'}

${pullRequest.body || 'No description provided.'}
`;
  }
}

async function commentWorkflow(pullRequest, github, changesetContents) {
  try {
    const comment = `ðŸ¤– **Changeset Automation**

I've automatically created a changeset for this PR based on the title: **${pullRequest.title}**

The changeset has been added to the \`.changeset/\` directory and will be included in the next release.

**Note:** If you need to modify the changeset, you can edit the generated file or add a \`skip-changeset\` label to this PR to prevent automatic changeset generation.

---
*This comment was automatically generated by the changeset automation workflow.*`;

    await github.rest.issues.createComment({
      owner: pullRequest.head.repo.owner.login,
      repo: pullRequest.head.repo.name,
      issue_number: pullRequest.number,
      body: comment
    });
  } catch (error) {
    console.error('Error creating comment:', error);
  }
}

module.exports = {
  getChangesetContents,
  commentWorkflow
}; 